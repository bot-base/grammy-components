import { generate } from "npm:ts-to-zod@3";

import * as schema from "../src/schema.json" assert { type: "json" };
import { join } from "https://deno.land/std/path/mod.ts";

export const definitions = schema.default.definitions;

const sourceDir = "./src/types";
const outputDir = "./src/validators";

Deno.removeSync(outputDir, {
  recursive: true,
});
Deno.mkdirSync(outputDir);

for (const file of Deno.readDirSync(sourceDir)) {
  if (file.isFile) {
    const sourceText = Deno.readTextFileSync(`${sourceDir}/${file.name}`);

    const { getZodSchemasFile } = generate({
      sourceText,
    });

    let validators = getZodSchemasFile("");
    validators =
      "// Generated by `deno task generate:validators`\n" +
      `import { z } from "../deps/zod.ts"\n\n` +
      validators.slice(validators.indexOf("export"));

    const outputPath = join(outputDir, file.name);

    Deno.writeTextFileSync(outputPath, validators);

    const formatCommand = new Deno.Command(Deno.execPath(), {
      args: ["fmt", outputPath],
    });
    await formatCommand.output();
  }
}
